13 June

https://confluence.stsci.edu/display/PSPS/PanSTARRS+Image+Cutout+Service

Machine that has the panstarr servers mounted:
plpsipp1v.stsci.edu

my directory:
ifs/missions/panstarrs/tmp/cbrasseur

https://github.com/ChrisBeaumont/toasty

22 June

Some random fil locations:

/data/ps1/node01/stps01.1/nebulous/53/41/2173317504.gpc1:ecliptic:20:00hr:o6094g0479o.500525:o6094g0479o.500525.wrp.440931.RINGS.V3.skycell.0870.0.b1.fits
/data/ps1/node01/stps01.1/nebulous/53/41/6000801179.gpc1:LAP.PV3.20140730.bigmem:2015:01:26:RINGS.V3:skycell.2100.001:RINGS.V3.skycell.2100.001.stk.4271072.unconv.wt.fits
/data/ps1/node01/stps01.1/nebulous/53/41/7987850043.gpc1:LAP.PV3.20140730.ipp:2014:10:30:RINGS.V3:skycell.2565.068:RINGS.V3.skycell.2565.068.stk.3708485.unconv.wt.fits

/data/ps1/node01/stps01.1/nebulous/53/4e/6078528756.gpc1:LAP.PV3.20140730.bigmem:2015:02:03:RINGS.V3:skycell.1438.063:RINGS.V3.skycell.1438.063.stk.4343639.unconv.num.fits
/data/ps1/node01/stps01.1/nebulous/53/4e/7998974750.gpc1:LAP.PV3.20140730.restack:2014:11:06:RINGS.V3:skycell.1289.034:RINGS.V3.skycell.1289.034.stk.3768102.unconv.mask.fits

/data/ps1/node17/stps17.0/nebulous/30/15/5476614343.gpc1:LAP.PV3.20140730.ipp:2014:11:18:RINGS.V3:skycell.2568.000:RINGS.V3.skycell.2568.000.stk.3937514.unconv.fits
/data/ps1/node17/stps17.0/nebulous/30/15/5697628854.gpc1:LAP.PV3.20140730.bigmem:2014:12:18:RINGS.V3:skycell.2542.026:RINGS.V3.skycell.2542.026.stk.4055312.unconv.expwt.fits
/data/ps1/node17/stps17.0/nebulous/30/15/7133492860.gpc1:LAP.PV3.20140730:2014:12:03:RINGS.V3:skycell.0645.065:RINGS.V3.skycell.0645.065.stk.3988835.unconv.num.fits
/data/ps1/node17/stps17.0/nebulous/30/15/7142332104.gpc1:LAP.PV3.20140730:2014:12:11:RINGS.V3:skycell.1681.074:RINGS.V3.skycell.1681.074.stk.4008152.unconv.num.fits
/data/ps1/node17/stps17.0/nebulous/30/15/7211547299.gpc1:LAP.PV3.20140730:2015:02:26:RINGS.V3:skycell.1351.064:RINGS.V3.skycell.1351.064.stk.4583326.unconv.mask.fits

OK, randomly selecting g as the freq band to start with :P

Ideas: Can I load up all the footprints once and save them somewhere? (With associated file locations)
       Let's see, there are 2644 * 100 skycells... that seems doable :P

Test galactic coordinates (all should be in the skycell)
101.9895°  59.7345°
102.0321°  59.7683°
102.0925°  59.7682°

101.9950°  59.7562°
102.0207°  59.7845°
102.0682°  59.8000°

101.9476°  59.7804°
102.0205°  59.7851°
102.0682°  59.8011°

ok, but they're not... :P

coordinates that should NOT be in the skycell
102.1268°  59.3619°
102.2145°  59.3938°

102.0754°  59.3869°
102.1653°  59.4176°


l = np.array([[101.9895,102.0321,102.0925],[101.9950,102.0207,102.0682],[101.9476,102.0205,102.0682]])
b = np.array([[59.7345,59.7683,59.7682],[59.7562,59.7845,59.8000],[59.7804,59.7851,59.8011]])

l = np.array([[102.1268,102.2145],[102.0754,102.1653]])
b = np.array([[59.3619,59.3938],[59.3869,59.4176]])

Making a small array that is DEF within the footprint :P

 (210.85302454, 53.97514527)
 (210.86786876, 54.41257589)
 (210.11835316, 54.41900608)
 (210.11137897, 53.98147315)

210.4 54.1
210.5 54.1
210.6 54.1

210.4 54.2
210.5 54.2
210.6 54.2

210.4 54.3
210.5 54.3
210.6 54.3

l = np.array([[210.2,210.3,210.4],[210.2,210.3,210.4],[210.2,210.3,210.4]])
b =  np.array([[54.1,54.1,54.1],[54.2,54.2,54.2],[54.3,54.3,54.3]])

skyposes = SkyCoord(ra=l*u.degree,dec=b*u.degree)

<SkyCoord (Galactic): (l, b) in deg
    [[(102.36190451, 60.17075428), (102.2623215, 60.13941196),
      (102.16301764, 60.10792511)],
     [(102.46883844, 60.08611706), (102.36964899, 60.05493054),
      (102.27073581, 60.02359996)],
     [(102.57522439, 60.00139401), (102.47642819, 59.9703626),
      (102.37790539, 59.93918761)]]>

l =  np.array([[102.36190451,102.2623215,102.16301764],
               [102.46883844,102.36964899,102.27073581],
               [102.57522439,102.47642819,102.37790539]])
b =  np.array([[60.17075428,60.13941196,60.10792511],
               [60.08611706,60.05493054,60.02359996],
               [60.00139401,59.9703626,59.93918761]])


M101 RA and dec(decimal)
210.79995 54.34410


28 June

OK, I can access all the fits files through my browser or wget or something, but it is way slow, so will def want to put script on the server for more direct file access.

(so...probably talk to Bernie and/or Brian before doing the final toasting, about
space stuff, but when toasting small sections, it shouldn't be a problem)

(also will need to get footprints while on the server)


29 June

The sql search to use on twmastdb5/PSAdmin database:

select s.SCn, s.SCm, s.fileNPath
from stacks as s
inner join dataProducts as d on s.fileExtID=d.fileExtID
where  filter='r'
and d.description='stack data image'
and s.fileFoundOnDisk='T'
order by scn, scm, filter


To read in the result:

from astropy.io import ascii

psCells=ascii.read("filter_r_rings.rpt")

* IMPORTANT: go to the end of the file and delete the (# rows affected) bit or data will not
             be read in with proper datatypes

5 July

export PATH="/usr/local/anaconda3/bin:$PATH"
export PYTHONPATH="/home/cbrasseur/toasty/bin/lib/python3.5/site-packages:$PATH"
python setup.py install --prefix=/home/cbrasseur/toasty/bin


export PYTHONPATH="/home/cbrasseur/toasty/bin/lib/python3.5/site-packages:/usr/local/anaconda3/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/cbrasseur/bin:/usr/local/mozilla:/usr/local/bin:."

Figuring out what the $%#$@ is happening...


First toast tile upper left coordinate:
-4.67973102201e-05  0.981718582003
 6.28313850987      0.981718582003
 359.997318712      56.2483314184

Skycell: [2404] , [5]

[[  2.94450629e-02   5.59597828e+01]
 [  2.97900053e-02   5.63975324e+01]
 [  3.59242500e+02   5.63952277e+01]
 [  3.59251270e+02   5.59575170e+01]]
 
[<SkyCoord (ICRS): (ra, dec) in deg
    (0.02944506, 55.95978279)>
 <SkyCoord (ICRS): (ra, dec) in deg
    (0.02979001, 56.39753241)>
 <SkyCoord (ICRS): (ra, dec) in deg
    (359.24249991, 56.39522772)>
 <SkyCoord (ICRS): (ra, dec) in deg
    (359.25127011, 55.95751697)>]

OK, minmax is bad here... need some sort of if...


if (footprint[0].ra - footpring[4].ra) > 0:
   In this case all is well in the world and we may proceed as usual
else:
    Split into two sections

OK, let's see if this is enough...

Running:
toastPanstarrs.py 8 toasts/ps1_M101 210.3,211 54,55.6
on plpsipp1v took ~2min (woo!)

Right, ok, so this was important (the around the circle stuff), but I should not have been running into it since I was doing  210.3 - 211..... need to sort that out :P


Whooo boy.... why am I getting images near the circle crossover... did I screw something up in toasty?
yuuuuuuup, fixed now though

6 July

commands I need on plpsipp1v:

export PATH="/usr/local/anaconda3/bin:$PATH"
export PYTHONPATH="/home/cbrasseur/toasty/bin/lib/python3.5/site-packages:$PATH"
python setup.py install --prefix=/home/cbrasseur/toasty/bin


/home/cbrasseur/toasty/bin/lib/python3.5/site-packages/



tar -czf layer8.tar.gz 8
scp layer8.tar.gz clara.stsci.edu:/Users/cbrasseur/Documents/panstarrs/toasts/ps1_M101/


10x5 deg to depth 12 = 4.5 hours

psCells = ascii.read("filter_r_rings.rpt")
psSC2FileLoc = np.full((max(psCells['SCn']) + 1,max(psCells['SCm']) + 1),"",dtype='<U168')
psSC2FileLoc[psCells['SCn'],psCells['SCm']] = psCells['fileNPath']

def getPoly(dataFle):
    fitsFile = fits.open(dataFle)
    dfWcs = wcs.WCS(fitsFile[1].header)
    fp = dfWcs.calc_footprint(fitsFile[1].header)
    print(fp[0,0],fp[0,1],fp[1,0],fp[1,1],fp[2,0],fp[2,1],fp[3,0],fp[3,1],fp[0,0],fp[0,1])
    fitsFile.close()

getPoly(psSC2FileLoc[2380][3])

def getPoly(dataFle):
    fitsFile = fits.open(dataFle)
    dfWcs = wcs.WCS(fitsFile[1].header)
    fp = dfWcs.calc_footprint(fitsFile[1].header)
    fitsFile.close()
    global id
    id += 1
    return '{"footprint":"POLYGON ICRS %.10f %.10f  %.10f %.10f  %.10f %.10f  %.10f %.10f  %.10f %.10f","_id_":"ext-record-%d"},'%(fp[0,0],fp[0,1],fp[1,0],fp[1,1],fp[2,0],fp[2,1],fp[3,0],fp[3,1],fp[0,0],fp[0,1],id)


fpRows = []
for x,y in cellCoords:
    fpRows.append(getPoly(psSC2FileLoc[x][y]))

[(206.5429879577,50.3595201623),(206.5664791519,50.7961226801),(205.8794164759,50.8091851629),(205.8622034902,50.3723833196),(206.5429879577,50.3595201623),(205.9143164944,50.3715393400),(205.9320104613,50.8083281017),(205.2444411176,50.8176647265),(205.2330391418,50.3807334322),(205.9143164944,50.3715393400),(207.1980720113,50.7472786723),(207.2278461919,51.1835492499),(206.5355714033,51.2005678173),(206.5121641688,50.7640388004),(207.1980720113,50.7472786723)]


10x5 degrees depth 8 with Rick's code and no caching = 12.2 min

1x1 degree depth 12 with Rick's code and no caching = 13.5 min
Assuming linear scaling you get 11.5 hours for 10x5...bad...
Hopefully not linear scaling.... also hopefully, caching will help


Using caching with cache size of 50, 5x10 depth 12 takes 87 minutes
=> ~52.5 days so MUCH better, but not yet perfect

Offsets between file accesses:
offsets = [69, 59, 116, 86, 87, 93, 59, 58, 52, 59, 56, 93, 56, 53, 53, 61, 53, 96, 57, 91, 87, 55, 54, 61, 51, 51, 95, 51, 51, 95, 53, 64, 89, 51, 53, 51, 51, 63, 116, 119, 82, 51, 65, 62, 51, 91]

12 July

OK, increased cache and now runs in 97 minutes (5845.664836406708), what gives!?  ARGH.
I will talk to Tony tomorrow.

Trying run with new method of uniquing filenames
4244.57 sec = 70.7 min (cachesize = 50)

Another run sans new uniquingm with cachesize 50 gave:
6115.7 = 101.9 min (I don;t know why this is so much higher than my first run)

sines[l90 ^ l180] = sineVals[(-((angles[l90 ^ l180]-90)*1000 + 1)).astype(int)]


from top:
Mem:  16333944k total, 16026924k used,   307020k free,     3304k buffers
Swap:  2097148k total,  1439148k used,   658000k free,   481232k cached

Mem:  16333944k total, 16020456k used,   313488k free,     1828k buffers
Swap:  2097148k total,  1467804k used,   629344k free,   510740k cached

Mem:  16333944k total, 16054916k used,   279028k free,     1080k buffers
Swap:  2097148k total,   927000k used,  1170148k free,    58212k cached


5403.8 = 90min adding in LUT


optomized _mid:
cdef void _mid(Point a, Point b, Point *cen):
    """
    Return the midpoint of two points on a great circle arc

    Parameters
    ----------
    a, b: Point
    Two lon, lat pairs, in radians
    """
    cdef DTYPE_t dl, bx, by, b3, l3, outb, outl
    cdef Point out

    dl = b.x - a.x
    cosby = cos(b.y)
    cosay = cos(a.y)
    bx = cosby * cos(dl)
    by = cosby * sin(dl)
    outb = atan2(sin(a.y) + sin(b.y), hypot(cos(a.y) + bx, by))
    outl = a.x + atan2(by, cosay + bx)
    cen.x = outl
    cen.y = outb



In [12]: %timeit npsines = np.sin(tarr)
1000 loops, best of 3: 674 µs per loop

In [13]: %timeit nesines = ne.evaluate('sin(tarr)')
1000 loops, best of 3: 243 µs per loop


.001 full circle (no normalizing angle)

In [15]: %timeit mysines = trig.sin(ras)
The slowest run took 4.31 times longer than the fastest. This could mean that an intermediate result is being cached.
10000 loops, best of 3: 158 µs per loop

In [16]: %timeit mysines = trig.sin(ras)
10000 loops, best of 3: 148 µs per loop

.0001 quarter circle
%timeit mysines = trig.sin(ras)
1000 loops, best of 3: 1.03 ms per loop

.0001 quarter circle (no normalizing angle)
%timeit mysines = trig.sin(ras)
1000 loops, best of 3: 943 µs per loop



Looking at mid:

In [61]: %timeit toasty.tile.mid(a,b)
The slowest run took 17.07 times longer than the fastest. This could mean that an intermediate result is being cached.
1000000 loops, best of 3: 322 ns per loop

mine:
%timeit mid(a,b)
The slowest run took 5.27 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 6.91 µs per loop

(sooooper slow...)


19 July:

Trying 4 patches of the sky at once, chosen to highlight different possible issues in pixel scaling.

270,280 -27,-22 # close to galactic plane
205,215 52,57 # M101
105,115 -12,-7 # sirius
250,260 70,75 # dark(ish) patch of sky

export PATH="/usr/local/anaconda3/bin:$PATH"
export PYTHONPATH="/home/cbrasseur/toasty/bin/lib/python3.5/site-packages:$PATH"

nohup toastPanstarrs.py 12 toasts/ps1 270,275 -27,-22 > psOut_galPlane.txt &
nohup toastPanstarrs.py 12 toasts/ps1 100,105 -18,-13 > psOut_sirius.txt & 
nohup toastPanstarrs.py 12 toasts/ps1 205,210 52,57 > psOut_M101.txt &
nohup toastPanstarrs.py 12 toasts/ps1 250,255 70,75 > psOut_dark.txt &

nohup toastPanstarrs.py 12 toasts/ps1 275,280 -27,-22 > psOut_galPlane2.txt &
nohup toastPanstarrs.py 12 toasts/ps1 105,110 -18,-13 > psOut_sirius2.txt &
nohup toastPanstarrs.py 12 toasts/ps1 210,215 52,57 > psOut_M1012.txt &
nohup toastPanstarrs.py 12 toasts/ps1 255,260 70,75 > psOut_dark2.txt &

"filter_r_rings.rpt"

22 July

Rewrote toastPanstarrs.py to better handle command line arguments and be more flexible

Small test:

./toastPanstarrs.py -i filter_r_rings.rpt -d 12 -o toasts/ps1 -l 210.589,211 -b 54.26,54.45


plpsipp1v commands:

export PATH="/usr/local/anaconda3/bin:$PATH"
export PYTHONPATH="/home/cbrasseur/toasty/bin/lib/python3.5/site-packages:$PATH"

nohup toastPanstarrs.py -i filter_r_rings.rpt -d 12 -o toasts/ps1 -l 270,275 -b -27,-22 > psOut_galPlane.txt &
nohup toastPanstarrs.py -i filter_r_rings.rpt -d 12 -o toasts/ps1 -l 100,105 -b -18,-13 > psOut_sirius.txt & 
nohup toastPanstarrs.py -i filter_r_rings.rpt -d 12 -o toasts/ps1 -l 205,210 -b 52,57 > psOut_M101.txt &
nohup toastPanstarrs.py -i filter_r_rings.rpt -d 12 -o toasts/ps1 -l 250,255 -b 70,75 > psOut_dark.txt &

tar -czf layer12.tar.gz 12
scp layer12.tar.gz clara.stsci.edu:/Users/cbrasseur/Documents/panstarrs/toasts/ps1_plpsipp1v/


runPSTOAST.sh filter_r_rings.rpt /internal/data1/surveys/ps_r

4 August

Trouble shooting the toasting:

export PATH="/usr/local/anaconda3/bin:$PATH"
export PYTHONPATH="/home/cbrasseur/toasty/bin/lib/python3.5/site-packages:$PATH"

nohup toastPanstarrs.py -i filter_r_rings.rpt -d 12 -t 3,0,2 -o /internal/data1/surveys/ps_r &


python setup.py install --prefix=/home/cbrasseur/toasty/bin


toastPanstarrs.py -i filter_r_rings.rpt -d 12 -t 3,0,2 -o /internal/data1/surveys/ps_r -r

toastPanstarrs.py -i filter_r_rings.rpt -d 12 -t 10,310,589 -o /internal/data1/surveys/ps_r -r

toastPanstarrs.py -i filter_r_rings.rpt -d 12 -t 10,310,589 -o /internal/data1/colorizing/ps_r


convert ps_r/12/2356/2356_1240.png ps_g/12/2356/2356_1240.png ps_i/12/2356/2356_1240.png -combine ps_color/12/2356/2356_1240.png
